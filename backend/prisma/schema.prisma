// backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - Google OAuth only
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  picture       String?   // Google profile picture URL
  googleId      String    @unique
  refreshToken  String?   @db.Text // For future calendar integration
  
  // Settings
  autoDeleteDays Int      @default(30) // Auto-delete audio after X days
  emailNotifications Boolean @default(true)
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime  @default(now())
  
  // Relations
  meetings      Meeting[]
  
  @@index([email])
  @@index([googleId])
  @@map("users")
}

// Meeting status enum
enum MeetingStatus {
  UPLOADING
  PROCESSING_AUDIO
  TRANSCRIBING
  PROCESSING_NLP
  SUMMARIZING
  COMPLETED
  FAILED
}

// Meeting category enum
enum MeetingCategory {
  SALES
  PLANNING
  STANDUP
  ONE_ON_ONE
  OTHER
}

// Meeting model - Core entity
model Meeting {
  id            String          @id @default(uuid())
  title         String
  description   String?         @db.Text
  category      MeetingCategory @default(OTHER)
  status        MeetingStatus   @default(UPLOADING)
  
  // Audio metadata
  audioUrl      String?         // Processed audio URL (Supabase storage)
  audioSize     Int?            // File size in bytes
  audioDuration Float?          // Duration in seconds (max 180)
  audioFormat   String?         // e.g., "mp3", "wav"
  
  // Processing results
  transcriptText String?        @db.Text
  transcriptWordCount Int?
  
  // NLP results (JSON for flexibility)
  nlpEntities   Json?           // Named entities, dates, organizations
  nlpKeyPhrases Json?           // Key phrases extracted
  nlpActions    Json?           // Action items detected by NLP
  
  // AI Summary (structured format)
  summaryExecutive String?      @db.Text // Executive summary
  summaryKeyDecisions String?   @db.Text // Key decisions made
  summaryActionItems Json?      // [{task, assignee?, deadline?}]
  summaryNextSteps String?      @db.Text // Next steps
  
  // Processing metadata
  processingError String?       @db.Text
  processingStartedAt DateTime?
  processingCompletedAt DateTime?
  processingDuration Float?     // Total processing time in seconds
  
  // Audio deletion tracking
  audioDeletedAt DateTime?      // When audio was auto-deleted
  shouldDeleteAudioAt DateTime? // Scheduled deletion date
  
  // Email notification
  emailSent      Boolean        @default(false)
  emailSentAt    DateTime?
  
  // Timestamps
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  // Relations
  userId         String
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
  @@index([category])
  @@index([createdAt])
  @@index([shouldDeleteAudioAt]) // For cron job cleanup
  @@map("meetings")
}

// Processing log for debugging and analytics
model ProcessingLog {
  id            String   @id @default(uuid())
  meetingId     String
  stage         String   // "audio", "transcription", "nlp", "summary"
  status        String   // "started", "completed", "failed"
  details       Json?    // Additional details, errors, metrics
  duration      Float?   // Stage duration in seconds
  createdAt     DateTime @default(now())
  
  @@index([meetingId])
  @@index([stage])
  @@index([createdAt])
  @@map("processing_logs")
}

// User activity tracking (optional for analytics)
model UserActivity {
  id            String   @id @default(uuid())
  userId        String
  action        String   // "login", "record", "view_meeting", "download"
  metadata      Json?    // Additional context
  createdAt     DateTime @default(now())
  
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("user_activities")
}